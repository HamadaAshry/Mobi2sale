{
	"Query Handler": {
		"prefix": "Qhandler",
		"body": [
		  "  public class Query : IRequest<${1:ResponseDto}> { ",
		  "       //Add The ResponseDto Props.",
		  "",
		  "        }",
		  "",
		  "        public class Handler : IRequestHandler<Query, List<${1:ResponseDto}>>",
		  "        {",
		  "            private readonly IUnitOfWork _uow;",
		  "            private readonly IMapper _mapper;",
		  "            public Handler(IUnitOfWork uow, IMapper mapper)",
		  "            {",
		  "                _mapper = mapper;",
		  "                _uow = uow;",
		  "            }",
		  "",
		  "            public async Task<List<${1:ResponseDto}>> Handle(Query request, CancellationToken cancellationToken)",
		  "            {",
		  "               //Add handler logic here.",
		  "            }",
		  "        }"
		],
		"description": "Query Handler"
	  },
	  "Details Handler": {
		"prefix": "Dhandler",
		"body": [
		  "  public class Query : IRequest<${1:ResponseDto}> {",
		  "          //Add Post Dto Props",
		  "",
		  "        }",
		  "",
		  "        public class Handler : IRequestHandler<Query, ${1:ResponseDto}> {",
		  "            private readonly IUnitOfWork _uow;",
		  "            private readonly IMapper _mapper;",
		  "            public Handler (IUnitOfWork uow, IMapper mapper) {",
		  "                this._mapper = mapper;",
		  "                _uow = uow;",
		  "",
		  "            }",
		  "            public async Task<${1:ResponseDto}> Handle (Query request, CancellationToken cancellationToken) {",
		  "              //Add handler Logic Here.",
		  "            }",
		  "        }"
		],
		"description": "Details Handler"
	  },
	  "Create Handler": {
		"prefix": "Chandler",
		"body": [
		  " public class Command : IRequest<${1:ResponseDto}>",
		  "        {",
		  "           //Add Request object properties",
		  "",
		  "        }",
		  "        public class CommandValidator : AbstractValidator<Command>",
		  "        {",
		  "            public CommandValidator()",
		  "            {",
		  "              //Add validation rules",
		  "            }",
		  "        }",
		  "",
		  "        public class Handler : IRequestHandler<Command, ${1:ResponseDto}>",
		  "        {",
		  "            private readonly IMapper _mapper;",
		  "            private readonly IUnitOfWork _uow;",
		  "          ",
		  "            public Handler(IMapper mapper, IUnitOfWork uow)",
		  "            {",
		  "                this._uow = uow;",
		  "                _mapper = mapper;",
		  "            }",
		  "            public async Task<${1:ResponseDto}> Handle(Command command, CancellationToken cancellationToken)",
		  "            {",
		  "               //Add your logic Here",
		  "",
		  "                return await _uow.SaveAsync() > 0 ? _mapper.Map<${2:DomainEntity}, ${1:ResponseDto}>(${3:DBObject}) :",
		  "                    throw new Exception(\"Error saving The data!\");",
		  "",
		  "            }",
		  "",
		  "           ",
		  ""
		],
		"description": "Create Handler"
	  }
	  ,
	  "Update Handler": {
		"prefix": "Uhandler",
		"body": [
		  "  public class Command : IRequest<${1:Dto}>",
		  "        {",
		  "           //Add Dto properties here",
		  "",
		  "        }",
		  "        public class CommandValidator : AbstractValidator<Command>",
		  "        {",
		  "            public CommandValidator()",
		  "            {",
		  "              //Add validation rules",
		  "            }",
		  "        }",		 
		  "",
		  "        public class Handler : IRequestHandler<Command, ${1:Dto}>",
		  "        {",
		  "            private readonly IMapper _mapper;",
		  "            private readonly IUnitOfWork _uow;",
		  "            public Handler(IMapper mapper, IUnitOfWork uow)",
		  "            {",
		  "                this._uow = uow;",
		  "                _mapper = mapper;",
		  "",
		  "            }",
		  "            public async Task<Command> Handle(Command command, CancellationToken cancellationToken)",
		  "            {",
		  "               //Add handler Logic.",
		  "               var succeded=await  _uow.SaveAsync()>0;",
		  "               return succeded ? _mapper.Map<${1:Entity}, ${1:Dto}>(${1:EntityObj}):null; ", 
		  "            }",
		  "        }"
		],
		"description": "Update Handler"
	  },
	  "Delete Handler": {
		"prefix": "Delhandler",
		"body": [
		  "  public class Command : IRequest<${1:Dto}>",
		  "        {",
		  "           //Add Dto properties here",
		  "",
		  "        }",
		  "",
		  "        public class Handler : IRequestHandler<Command, ${1:Dto}>",
		  "        {",
		  "            private readonly IMapper _mapper;",
		  "            private readonly IUnitOfWork _uow;",
		  "            public Handler(IMapper mapper, IUnitOfWork uow)",
		  "            {",
		  "                this._uow = uow;",
		  "                _mapper = mapper;",
		  "",
		  "            }",
		  "            public async Task Handle(Command command, CancellationToken cancellationToken)",
		  "            {",
		  "               //Add handler Logic.",
		  "               var succeded=await  _uow.SaveAsync()>0;",
		  "               return succeded  ", 
		  "            }",
		  "        }"
		],
		"description": "Delete Handler"
	  },
	  "PagedListHandler": {
		"prefix": "pqHandler",
		"body": [
		  " public class Query : IRequest<${1:IEnvelopes<ResponseDto>}> {",
		  "            public Query ( IPaginationAndFilterProps pageProps, IEnvelopes<ResponseDto> env) {",
		  "                this.Env = env;              ",
		  "                PageProps = pageProps;",
		  "            }     ",
		  "",
		  "            public IPaginationAndFilterProps PageProps { get; }",
		  "",
		  "            public IEnvelopes<ResponseDto> Env { get; set; }",
		  "",
		  "        }",
		  "",
		  "        public class Handler : IRequestHandler<Query, IEnvelopes<ItemsResponseDto>> {",
		  "            private readonly IMapper _mapper;",
		  "            private readonly IUnitOfWork _uow;",
		  "",
		  "            public Handler (IMapper mapper, IUnitOfWork uow) {",
		  "                this._uow = uow;",
		  "                _mapper = mapper;",
		  "            }",
		  "            public async Task<IEnvelopes<ItemsResponseDto>> Handle (Query query, CancellationToken cancellationToken) {",
		  "                //Add your logic Here",
		  "                var itemsEnv = await _uow.${1:Repo} (query.PageProps, query.SubcategoryId);",
		  "                query.Env.Data= _mapper.Map<List<Entity>,List<ResponseDto>>(itemsEnv.Data);",
		  "                query.Env.RecordsCount=itemsEnv.RecordsCount;",
		  "                return query.Env;",
		  "                 ",
		  "",
		  "            }"
		],
		"description": "PagedListHandler"
	  }
}